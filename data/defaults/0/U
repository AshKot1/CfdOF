%[_header%]
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (%(initialValues/Ux%) %(initialValues/Uy%) %(initialValues/Uz%));

boundaryField
{

%{%(boundaries%)
%{%(boundaries/%(0%)/BoundaryType%)
%:wall
%{%(boundaries/%(0%)/BoundarySubtype%)
%:fixed rough
    %(0%)
    {
        // movingWallVelocity reduces to fixedValue if the mesh is not moving
        type        movingWallVelocity;
        value       uniform (0 0 0);
    }
%:slip
    %(0%)
    {
        type        slip;
        value       $internalField;
    }
%:translating
    %(0%)
    {
        // Specified velocity, only component tangential to wall is used
        type        translatingWallVelocity;
        U           (%(boundaries/%(0%)/Ux%) %(boundaries/%(0%)/Uy%) %(boundaries/%(0%)/Uz%));
        value       uniform (0 0 0);
    }
%:partialSlip
    %(0%)
    {
        type            partialSlip;
        valueFraction   %(boundaries/%(0%)/SlipRatio%);
        value           uniform (0 0 0);
    }
%}
%:inlet
%{%(boundaries/%(0%)/BoundarySubtype%)
%:uniformVelocity
    %(0%)
    {
        // Fix all three components of velocity on inflow and only the normal component on outflow,
        // in order to be well-posed if there are some faces on the patch which are actually outflows.
        type                fixedNormalInletOutletVelocity;
        fixTangentialInflow yes;
        normalVelocity
        {
            type            fixedValue;
            value           uniform (%(boundaries/%(0%)/Ux%) %(boundaries/%(0%)/Uy%) %(boundaries/%(0%)/Uz%));
        }
        value               uniform (%(boundaries/%(0%)/Ux%) %(boundaries/%(0%)/Uy%) %(boundaries/%(0%)/Uz%));
    }
%:volumetricFlowRate
    %(0%)
    {
        type                flowRateInletVelocity;
        volumetricFlowRate  %(boundaries/%(0%)/VolFlowRate%);
        value               $internalField;
    }
%:massFlowRate
    %(0%)
    {
        type            flowRateInletVelocity;
        massFlowRate    %(boundaries/%(0%)/MassFlowRate%);
        rho             rho;
        rhoInlet        %(fluidProperties/Density%);
        value           $internalField;
    }
%:totalPressure
%[0/_U_boundary_pressureInletOutletVelocity%]
%:staticPressure
%[0/_U_boundary_pressureInletOutletVelocity%]
%}
%:outlet
%{%(boundaries/%(0%)/BoundarySubtype%)
%:staticPressure
%[0/_U_boundary_pressureInletOutletVelocity%]
%:uniformVelocity
    %(0%)
    {
        // Fix only the normal component on outflow and all three components of velocity on inflow,
        // in order to be well-posed on outflow and also in case there are any faces with inflowing velocity.
        type                fixedNormalInletOutletVelocity;
        fixTangentialInflow yes;
        normalVelocity
        {
            type            fixedValue;
            value           uniform (%(boundaries/%(0%)/Ux%) %(boundaries/%(0%)/Uy%) %(boundaries/%(0%)/Uz%));
        }
        value               uniform (%(boundaries/%(0%)/Ux%) %(boundaries/%(0%)/Uy%) %(boundaries/%(0%)/Uz%));
    }
%:outFlow
    %(0%)
    {
        type        inletOutlet;
        inletValue  (0 0 0);
        //TODO: We need to write an out-flowing value here so that adjustPhi can have an adjustable flux to work
        //TODO: with at iteration 1
        value       $internalField;
    }
%}
%:open
%[0/_U_boundary_pressureInletOutletVelocity%]
%:constraint
%[0/_boundary_constraint%]
%:baffle
%{%(boundaries/%(0%)/BoundarySubtype%)
%:porousBaffle
%[0/_boundary_cyclic_baffle%]
%}
%}

%}
    defaultFaces
    {
        type        slip;
        value       $internalField;
    }

}

// ************************************************************************* //
