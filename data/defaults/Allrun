#!/bin/bash

runCommand()
{
    if [ "$1" == "mpirun" ]; then sol="$4"; else sol="$1"; fi
    sol=$(basename -- "$sol")
    sol="${sol%.*}"
    if [ -f log."$sol" ]; then rm log."$sol"; fi
    "$@" 1> >(tee -a log."$sol") 2> >(tee -a log."$sol" >&2)
    err=$?
    if [ ! $err -eq 0 ]; then exit $err; fi
}

%{%(system/FoamRuntime%)
%:BlueCFD
%:default
# Unset and source bashrc
source "%(system/TranslatedFoamPath%)/etc/config.sh/unset" 2> /dev/null
source "%(system/TranslatedFoamPath%)/etc/bashrc"

%}
# Copy mesh from mesh case dir if available
if [ -d %(meshDir%) ]
then
    rm -r constant/polyMesh 2> /dev/null
    cp -r %(meshDir%)/constant/polyMesh constant/polyMesh
fi

# Update patch name and type
runCommand createPatch -overwrite

%{%(zonesPresent%)
%:True
# Scaling .stl files exported from FreeCAD from mm to m
%{%(zones%)
%{%(zones/%(0%)/PartNameList%)
runCommand surfaceTransformPoints -scale "(0.001 0.001 0.001)" "constant/triSurface/%(0%).stl" "constant/triSurface/%(0%)Scaled.stl"

%}
%}
# Set cell zones contained inside the .stl surfaces
runCommand topoSet -dict system/topoSetZonesDict

%}
%{%(initialisationZonesPresent%)
%:True
# Set internal fields according to setFieldsDict
runCommand setFields

%}
%{%(bafflesPresent%)
%:True
%{%(createPatchesFromSnappyBaffles%)
%:False
# Combine mesh faceZones
runCommand topoSet -dict system/topoSetBafflesDict

# Creating baffles
runCommand createBaffles -overwrite

%}
%}
%{%(runChangeDictionary%)
%:True
# Update patch name and type
runCommand changeDictionary

%}
%{%(initialValues/PotentialFoam%)
%:True
# Initialise flow
runCommand potentialFoam -initialiseUBCs -writep
%}
%{%(solver/parallel%)
%:True
# Run application in parallel
runCommand decomposePar -force
runCommand mpirun -n %(solver/parallelCores%) %(solver/solverName%) -parallel
%:False
# Run application
runCommand %(solver/solverName%)
%}

